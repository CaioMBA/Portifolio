@page "/contact"
@rendermode InteractiveServer
@using PortifolioCore.Entities.Models.ContactModels;
@using PortifolioCore.Entities.Models.AboutModels;
@using System.ComponentModel.DataAnnotations
@inject IContactService _service;
@inject IAboutServices _aboutService;

<PageTitle>Contact</PageTitle>
<link href="style/Contact.css" rel="stylesheet" />


<div class="main-container">
    <ul class="main-row">
        <li class="section-title">
            <h2>Contact me</h2>
        </li>
    </ul>
    <h3 class="contact-title">Have you got any questions?</h3>
    <h4 class="contact-sub-title">I'm at your services!</h4>
    <ul class="main-row">
        <li class="contact-info-item">
            <a class="icon" href="https://wa.me/@(OnlyPhoneNumber())">
                <i class="fa-brands fa-whatsapp"></i>
            </a>
            <h4>Message me on</h4>
            <p>@_information.Phone</p>
        </li>
        <li class="contact-info-item">
            <a class="icon" href="https://maps.google.com/?q=@_information.Location">
                <i class="fa fa-map-marker-alt"></i>
            </a>
            <h4>Office</h4>
            <p>@_information.Location</p>
        </li>
        <li class="contact-info-item">
            <a class="icon" href="mailto:@_information.Email">
                <i class="fa fa-envelope"></i>
            </a>
            <h4>Email</h4>
            <p>@_information.Email</p>
        </li>
        <li class="contact-info-item">
            <a class="icon" href="@_information.Website">
                <i class="fa fa-globe-europe"></i>
            </a>
            <h4>Website</h4>
            <p>@_information.Website</p>
        </li>
    </ul>
    <h3 class="contact-title">Send me an email</h3>
    <h4 class="contact-sub-title">I'm very responsive to messages</h4>

    <ul class="main-row">
        <li>
            <EditForm Model="@form" class="contact-form" OnValidSubmit="Submit">
                <DataAnnotationsValidator />
                <ol class="main-row">
                    <li class="form-item colx-6">
                        <div class="forms-group">
                            <input type="text" class="forms-control" @bind="@form.Name" placeholder="Name" />
                            <ValidationMessage style="color: var(--red-color); font-size: 12px;" For="@(() => form.Name)" />
                        </div>
                    </li>
                    <li class="form-item colx-6">
                        <div class="forms-group">
                            <input type="email" class="forms-control" @bind="@form.Address" placeholder="Email" />
                            <ValidationMessage style="color: var(--red-color); font-size: 12px;" For="@(() => form.Address)" />
                        </div>
                    </li>
                    <li class="form-item colx-12">
                        <div class="forms-group">
                            <input type="text" class="forms-control" @bind="@form.Subject" placeholder="Subject" />
                            <ValidationMessage style="color: var(--red-color); font-size: 12px;" For="@(() => form.Subject)" />
                        </div>
                    </li>
                    <li class="form-item colx-12">
                        <div class="forms-group">
                            <textarea class="forms-control" @bind="@form.Message" placeholder="Message"></textarea>
                            <ValidationMessage style="color: var(--red-color); font-size: 12px;" For="@(() => form.Message)" />
                        </div>
                    </li>
                    <li class="form-item colx-12">
                        <button type="submit" class="button">Send</button>
                    </li>
                </ol>
            </EditForm>
        </li>
    </ul>
</div>


@code {
    private class FormContactModel
    {
        [Required(ErrorMessage = "Name is a required field.")]
        public string? Name { get; set; }

        [Required(ErrorMessage = "Email is a required field.")]
        [EmailAddress(ErrorMessage = "Invalid email format.")]
        public string? Address { get; set; }

        [Required(ErrorMessage = "Subject is a required field.")]
        public string? Subject { get; set; }

        [Required(ErrorMessage = "Message is a required field.")]
        public string? Message { get; set; }
    }

    FormContactModel form = new FormContactModel();

    private InformationModel _information => _aboutService.getInfo();

    private async Task Submit()
    {
        try
        {
            _service.SendMail(_information.Email!, form.Name!, form.Address!, form.Subject!, form.Message!);

            ClearForm();
        }
        catch (Exception ex)
        {
            await _JS.InvokeVoidAsync("alert", ex.Message);
        }
    }

    private void ClearForm()
    {
        form = new FormContactModel();
    }

    private string OnlyPhoneNumber()
    {
        return _information.Phone!.Aggregate("", (current, c) => char.IsDigit(c) ? current + c : current);
    }
}

